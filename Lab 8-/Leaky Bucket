#include <stdio.h>

// Function to return the minimum of two numbers
int min(int x, int y) {
    if (x < y)
        return x;
    else
        return y;
}

int main() {
    int drop = 0, mini, nsec, cap, count = 0, i, inp[25], process;

    printf("Enter the bucket size: ");
    scanf("%d", &cap);

    printf("Enter the processing rate: ");
    scanf("%d", &process);

    printf("Enter the number of seconds you want to simulate: ");
    scanf("%d", &nsec);

    for (i = 0; i < nsec; i++) {
        printf("Enter the size of the packet entering at %d sec: ", i + 1);
        scanf("%d", &inp[i]);
    }

    printf("\nSecond | Packet Received | Packet Sent | Packet Left | Dropped\n");
    printf("---------------------------------------------------------------\n");

    for (i = 0; i < nsec; i++) {
        count += inp[i];   // Add incoming packets

        if (count > cap) { // If bucket overflows
            drop = count - cap;
            count = cap;
        }

        printf("%4d\t%8d\t\t", i + 1, inp[i]);

        mini = min(count, process); // Packets sent this second
        printf("%8d\t\t", mini);

        count = count - mini;       // Remaining in bucket
        printf("%8d\t%8d\n", count, drop);

        drop = 0; // Reset drop counter for next iteration
    }

    // Continue sending remaining packets after inputs are done
    while (count != 0) {
        if (count > cap) {
            drop = count - cap;
            count = cap;
        }

        printf("%4d\t%8d\t\t", i + 1, 0);

        mini = min(count, process);
        printf("%8d\t\t", mini);

        count = count - mini;
        printf("%8d\t%8d\n", count, drop);

        i++;
        drop = 0;
    }

    return 0; // âœ… this ensures the function closes properly
}

